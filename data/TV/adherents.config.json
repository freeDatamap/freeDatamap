{
    "$schema": "http://www.freedatamap.com/jsonConfigSchema/schema#",
    "$charset": "UTF-8",
    "config": {
        "name": "adherents.config",
        "root": null,
        "txtFontSize": 13,
        "displayColumnsAsAttributes": false,
        "center": null,
        "depth": 1,
        "sort": "items",
        "sortDescendant": true,
        "dm_DatamapName": "Adhérents",
        "csvSepIsSemicolon": true,
        "dm_sourceFile": "TV/adherents.csv",
        "$schema": "http://www.freedatamap.com/jsonConfigSchema/schema#",
        "forceCharge": -4000,
        "dontReduceNumberOfChildren": true,
        "forceFriction": 0.6,
        "forceAlpha": 0.1,
        "forceGravity": 0,
        "forceTheta": -2,
        "icon": "../../config/images/config/config_root.png",
        "possibleProperties": null,
        "maxNbOfColumns2tree": 10,
        "displayTransversalConnections": true,
        "displayArrowsOfTransversalConnections": true,
        "noColNameInShortDisplayName": true,
        "maxDepthForExport": 3,
        "retintIcons": false,
        "aggregate": [{
            "name": "items",
            "array index": 0,
            "value": "var output = 1, child ;
if(node.children && (node.children.length > 0)) {
    var i = node.children.length - 1 ;
    output = 0 ;
    for(; i>=0; i--) {
        child = node.children[i] ;
        if(!child.rawNode[propName]) {
            console.log('----- WARNING ! during items aggregation ITEMS VALUE ERROR ----------->' + dm_Tools.getNodePath(child), ' items = ' + child.rawNode[propName]) ;
        }
        output += node.children[i].rawNode[propName] ;
    }
    if(output > 1) {
        if(!node.rawNode[propName + '.dm_props']) node.rawNode[propName + '.dm_props'] = {} ;
        //node.rawNode[propName + '.dm_props'].visible = true ;
    }
} else {
    if(!node.rawNode[propName + '.dm_props']) node.rawNode[propName + '.dm_props'] = {} ;
    node.rawNode[propName + '.dm_props'].visible = false ;
    node.rawNode[propName + '.dm_props'].edit = false ;
}
if(!output) {
    console.log('----- WARNING ! during items aggregation ITEMS VALUE ERROR ----------->' + dm_Tools.getNodePath(node), ' items = ' + output) ;
}
return output ;",
            "funcDropdown": "count leaves",
            "execAfterChildrenVisit": true,
            "onlyLeaves": true,
            "label": "Items",
            "type": "text",
            "source": "aggregation",
            "children": [{
                "name": "dm_props",
                "array index": 0,
                "dontExport": true,
                "hideFromEdit": true
            }]
        }, {
            "name": "itemsPie",
            "array index": 1,
            "value": "var output, elt;
if(node.children && (node.children.length > 0) && !node.dm_isReducedNode) {
    var levelMin = dm_Tools.getDepth(node) ;
    var colName ;
    var doIt = function(node) {
        if (!output) {
            output = [] ;
        }
        elt = {} ;
        output.push(elt) ;
        elt.value = node.rawNode['items'] ;
        elt.name = node.name ; //dm_Tools.getNodePath(node, '', true, null, levelMin+1) ;
        elt.unit = 'item(s)' ;
    };
    var parentLevel = dm_Tools.getDepth(node) ;
    var depth = 1 ;
    var dive = function(node) {
        if (node) {
            var nodeLevel = dm_Tools.getDepth(node) ;
            if (nodeLevel == parentLevel + depth) {
                doIt(node);

                if(!colName) {
                    var configNode = dm_Tools.getConfig(node) ;
                    if(configNode && configNode.columns && (configNode.columns.length >= nodeLevel)) {
                        var col = configNode.columns[nodeLevel-1] ;
                        if(col) colName = col.name ;
                    }
                }
            } else if ((dm_Tools.getDepth(node) < parentLevel + depth) && (node.children)) {
                node.children.forEach(function(child) {
                    dive(child);
                });
            }
        }
    } ;
    dive(node);
    if(!node.rawNode['itemsPie.dm_props']) node.rawNode['itemsPie.dm_props'] = {} ;
    node.rawNode['itemsPie.dm_props'].label = colName ;
    //node.rawNode['itemsPie.dm_props'].visible = true ;
} else {
    if(!node.rawNode['itemsPie.dm_props']) node.rawNode['itemsPie.dm_props'] = {}
    node.rawNode['itemsPie.dm_props'].visible = false ;
    node.rawNode['itemsPie.dm_props'].edit = false ;
}
return output ;",
            "execAfterChildrenVisit": true,
            "children": [{
                "name": "dm_props",
                "array index": 1,
                "dontExport": true,
                "hideFromEdit": true
            }]
        }, {
            "name": "treeSunburst",
            "array index": 2,
            "value": "
if(!node.children || (node.children.length == 0) || node.dm_isReducedNode) {
    if(!node.rawNode['treeSunburst.dm_props']) node.rawNode['treeSunburst.dm_props'] = {}
    node.rawNode['treeSunburst.dm_props'].visible = false ;
    node.rawNode['treeSunburst.dm_props'].edit = false ;
} else {
    if(!node.rawNode['treeSunburst.dm_props']) node.rawNode['treeSunburst.dm_props'] = {}
    node.rawNode['treeSunburst.dm_props'].visible = true ;
}
return null ;",
            "execAfterChildrenVisit": true,
            "children": [{
                "name": "dm_props",
                "array index": 2,
                "dontExport": true,
                "hideFromEdit": true
            }]
        }, {
            "name": "dm_geoMapCoordsMinMax",
            "array index": 3,
            "value": "var output  ;
if(!node.children) {
    output = dm_Tools.geoMapGetMinMax(node.rawNode['dm_geometry_coords'], null, true, node.rawNode['dm_geometry_type']) ;
    if(!output) {
        console.log('WARNING: coordinates problem while calculating min/max of ' + node.name) ;
    }
}
if(node.children) {
    var minMax ;
    for(var i=0; i<node.children.length; i++) {
        minMax = dm_Tools.geoMapGetMinMax(node.children[i].rawNode[propName], output, null, 'min max') ;
        if(!minMax) {
            console.log('WARNING: coordinates problem while calculating min/max of ' + node.name) ;
        } else {
            output = minMax ;            
        }
    }
}
//console.log('node name '+node.name+' min/max '+JSON.stringify(output)) ;
return output ;
",
            "execAfterChildrenVisit": true,
            "onlyLeaves": true
        }, {
            "name": "dm_geoMapAggregatedGeoJson",
            "array index": 4,
            "value": "return dm_Tools.geoMapAggregateGeometry(node, propName) ;",
            "execAfterChildrenVisit": true,
            "onlyLeaves": true
        }, {
            "name": "dm_geoMapDisplayStreetView",
            "array index": 5,
            "value": "var output  ;
if(!true || !node.children) {
    var point = dm_Tools.geoMapGetClosest2center(node) ;
    output = {'lat': point[1], 'lng': point[0]} ;
}
return output;",
            "execAfterChildrenVisit": true,
            "onlyLeaves": true
        }],
        "columnNames": ["nom adhérent", "logos adhérents", "catégorie", "adresse", "latitude", "longitude", "téléphone", "site web", "activité", "texte", "mots clés", "dm_geometry_type", "dm_geometry_coords"],
        "columns": [{
            "name": "catégorie",
            "array index": 0,
            "columnIndex": 2
        }, {
            "array index": 1,
            "children": [{
                "name": "nom adhérent",
                "array index": 0,
                "columnIndex": 0
            }]
        }],
        "displayProps": [{
            "name": "root",
            "edit": false,
            "visible": false,
            "children": [{
                "name": "treeSunburst",
                "array index": 2,
                "label": "",
                "type": "graph",
                "graphModel": "sunburstChart",
                "maxLength": 12,
                "edit": false,
                "visible": true,
                "order": 20,
                "stopLegendAtLevel": 1,
                /*"sortDescendant": false,*/
                "dontExport": true,
                "keepAfterGoto": true
            }, {
                "name": "compagniesCloud",
                "value": "
var output = [] ;
var children = dm_Tools.getNonReducedChildren(node, 2, false) ;
while(children.length > 0) output.push(children.pop().name) ;
output ;
",
                "order": 30,
                "type": "cloud",
                "visible": true,
                "sizeFactor": 40,
                /*"heightPercent": "35%",*/
                "angleFactor": 8,
                "colorPalette": "dm_Tools.modifiedCategory20b() ;",
                "hideFromEdit": true,
                "dontExport": true,
                "displayEvenIfNull": true
            }]
        }, {
            "name": "level 1",
            "visible": false,
            "edit": false,
            "children": [{
                "name": "compagniesCloud",
                "value": "
var output = [] ;
var children = dm_Tools.getNonReducedChildren(node) ;
while(children.length > 0) output.push(children.pop().name) ;
output ;
",
                "order": 20,
                "type": "cloud",
                "visible": true,
                "sizeFactor": 40,
                /*"heightPercent": "35%",*/
                "angleFactor": 8,
                "colorPalette": "dm_Tools.modifiedCategory20b() ;",
                "hideFromEdit": true,
                "dontExport": true,
                "displayEvenIfNull": true
            }, {
                "name": "treeSunburst",
                "array index": 2,
                "label": "",
                "type": "graph",
                "graphModel": "sunburstChart",
                "maxLength": 12,
                "edit": false,
                "visible": false,
                "order": 45,
                "dontExport": true,
                "keepAfterGoto": true
            }]
        }, {
            "name": "leaf",
            "visible": false,
            "children": [{
                "name": "catégorie",
                "order": 20,
                "visible": false
            }, {
                "name": "mots clés",
                "order": 30,
                "type": "rich text",
                "pre": "<div class=\"dm_border dm_info\" style=\"font-size: 18px; line-height: 22px;\"><b>",
                "post": "</b></div>"
            }, {
                "name": "activité",
                "order": 35,
                "type": "rich text",
                "pre": "<div class=\"dm_success\" style=\"font-size: 16px; line-height: 22px; text-align: justify;\">",
                /*"value": "value.replace(/\\n/g, '<br/>') ;",*/
                "post": "</div>"
            }, {
                "name": "texte",
                "order": 40,
                "type": "rich text",
                "pre": "<div class=\"dm_border dm_txtShadow\" style=\"font-size: 16px; line-height: 22px; text-align: justify;\">",
                "post": "</div>"
            }, {
                "name": "téléphone",
                "order": 50,
                "type": "action",
                "image": "TV/icones/tel-icon.png",
                "label": "
var output = '' ;
if(value) { 
    output = '' + value ;
    if(output.length == 9) {
        output = '0' + output ;
    }
    output = output.replace(/(\\d{2})(\\d{2})(\\d{2})(\\d{2})(\\d{2})/, '$1-$2-$3-$4-$5') ;
}
output ;
",
                "removeIfNoLabel": true,
                "class": "btn-large",
                "content.type": "href",
                "content.url": "
var output ;
if(value) { 
    output = '' + value ;
    if(output.length == 9) {
        output = '0' + output ;
    }
    output = 'tel:' + output ;
}
output ;
",
                "dontExport": true,
                "dontReplaceIfNotNull": true,
                "dontEdit": ["removeButton", "name", "notNestedLabel", "edit", "type", "source", "image", "class", "execBefore", "content.exec", "content.type"]
            }, {
                "name": "adresse",
                "order": 60,
                "type": "rich text",
                "pre": "<table><tr><td><img src=\"data/images/TV/icones/address.png\"/></td><td>&nbsp;&nbsp;&nbsp;</td><td><div style=\"text-align:center;\">",
                "post": "</div></td></tr></table>"
            }, {
                "name": "dm_geoMapDisplayStreetView",
                "type": "streetView",
                "dontExport": true,
                "order": 70
            }]
        }],
        "specifics": [{
            "name": "$dm_all",
            "icon.dm_props": {
                "order": 1,
                "type": "image",
                "visible": true
            }/*,
            "drawUnderlyingRawValuesCharts": "
dm_Tools.buildCharts4underlyingRawValues(node, null, null, ['drawUnderlyingRawValuesCharts']) ;
'#dm_STOP_AND_REDRAW_ATTRIBUTES_PANEL#1000' ;
",
            "drawUnderlyingRawValuesCharts.dm_props": {
                "order": 999,
                "visible": true,
                "dontExport": true,
                "type": "execute",
                "hideFromEdit": true,
                "name": "drawUnderlyingRawValuesCharts"
            }
            */
        }, {
            "name": "$dm_root",
            "icon": "TV/icones/adherents.png"
        }, {
            "name": "$dm_root|TPE-PME",
            "icon": "TV/icones/TPE_PME.png"
        }, {
            "name": "$dm_root|Associations",
            "icon": "TV/icones/associations.png"
        }, {
            "name": "$dm_root|Grands groupes",
            "icon": "TV/icones/grands groupes.png"
        }, {
            "name": "$dm_root|Institutionnels",
            "icon": "TV/icones/institutionnels.png"
        }, {
            "name": "$dm_root|Académiques / Centres de recherche",
            "icon": "TV/icones/academiques.png"
        }, {
            "name": "$dm_leaf",
            "icon.dm_props": {
                "scaleFactor": 15
            }
        }],
        "styles": [{
            "name": "root",
            "array index": 0,
            "level": 0,
            "arrow": true,
            "arc": false,
            "rNod": 10,
            "link": 180,
            "color": "#00668E",
            "icon.dm_props": {
                "type": "image",
                "visible": true,
                "scaleFactor": 6,
                "width": 200,
                "height": 200,
                "textX": 3
            },
            "txtFontSize": 16,
            "backgroundImage": "empty.jpg",
            /*"drawUnderlyingRawValuesCharts": false,*/
            "mapOpacity": 0.5
        }, {
            "name": "level 1",
            "array index": 1,
            "level": 1,
            "arrow": true,
            "arc": false,
            "rNod": 10,
            "link": 170,
            "color": "#842B5B",
            "icon.dm_props": {
                "type": "image",
                "visible": true,
                "scaleFactor": 6,
                "width": 200,
                "height": 200,
                "textX": 3
            },
            /*"drawUnderlyingRawValuesCharts": false,*/
            "mapOpacity": 0.35
        }, {
            "name": "leaf",
            "array index": 2,
            "level": 2,
            "arrow": false,
            "arc": true,
            "rNod": 4,
            "link": 130,
            "txtFontSize": 10,
            "color": "#c7c7c7",
            "txtCol": "#666666",
            "rotatingTargetColor": "#F28A35",
            "mapOpacity": 0.65
        }],
        "setColumns2node": {}
    }
}