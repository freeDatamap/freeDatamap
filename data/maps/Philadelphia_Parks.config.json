{
    "$schema": "http://www.freedatamap.com/jsonConfigSchema/schema#",
    "$charset": "UTF-8",
    "config": {
        "name": "Philadelphia_Parks.config",
        "txtFontSize": 13,
        "root": null,
        "center": null,
        "depth": 1,
        "sort": "linear",
        "sortDescendant": true,
        "displayArrowsOfTransversalConnections": false,
        "sort1": "items",
        "multicolorBrothers": true,
        "maxDepthForExport": 4,
        "dm_DatamapName": "GIS",
        "$schema": "http://www.freedatamap.com/jsonConfigSchema/schema#",
        "dm_sourceFile": "maps/Philadelphia_Parks.geojson",
        "icon": "../../config/images/config/config_root.png",
        "maxNbOfColumns2tree": 10,
        "csvSepIsSemicolon": true,
        "displayTransversalConnections": true,
        "possibleProperties": null,
        "aggregate": [{
            "name": "items",
            "array index": 0,
            "value": "var output = 1 ;
if(node.children) {
    var i = node.children.length - 1 ;
    output = 0 ;
    for(; i>=0; i--) {
        output += node.children[i].rawNode[propName] ;
    }
}
return output ;",
            "funcDropdown": "count leaves",
            "execAfterChildrenVisit": true,
            "onlyLeaves": true
        }, {
            "name": "dm_geoMapCoordsMinMax",
            "array index": 1,
            "value": "var output  ;
if(!true || !node.children) {
    output = dm_Tools.geoMapGetMinMax(node.rawNode['dm_geometry_coords'], null, true) ;
}
if(node.children) {
    for(var i=0; i<node.children.length; i++) {
        output = dm_Tools.geoMapGetMinMax(node.children[i].rawNode[propName], output) ;
    }
}
 return output;",
            "propertyName": "dm_geometry_coords",
            "funcDropdown": "sum property",
            "execAfterChildrenVisit": true,
            "onlyLeaves": true
        }, {
            "name": "dm_geoMapAggregatedGeoJson",
            "array index": 2,
            "value": "return dm_Tools.geoMapAggregateGeometry(node, propName) ;",
            "propertyName": "dm_geometry_coords",
            "funcDropdown": "sum property",
            "execAfterChildrenVisit": true,
            "onlyLeaves": true
        }, {
            "name": "linear",
            "array index": 3,
            "value": "var output  ;
if(!true || !node.children) {
    output = dm_Tools.geoMapCalculateLinear(node.rawNode.dm_geometry_coords, true) ;
}
if(node.children) {
    for(var i=0; i<node.children.length; i++) {
        if(!output) output = 0 ;
        output += parseFloat(node.children[i].rawNode[propName] || 0) ;
    }
}
return output ;",
            "propertyName": "dm_geometry_coords",
            "funcDropdown": "sum property",
            "execAfterChildrenVisit": true,
            "onlyLeaves": true
        }, {
            "name": "dm_geoMapDisplayStreetView",
            "array index": 4,
            "value": "var output  ;
if(!true || !node.children) {
    var point = dm_Tools.geoMapGetClosest2center(node) ;
    output = {'lat': point[1], 'lng': point[0]} ;
}
return output;",
            "propertyName": "dm_geometry_coords",
            "funcDropdown": "sum property",
            "execAfterChildrenVisit": true,
            "onlyLeaves": true
        }, {
            "name": "displayName",
            "array index": 5,
            "execAfterChildrenVisit": true,
            "funcDropdown": "sum property",
            "propertyName": "items",
            "value": "var output = node.name ;
var config = dm_Tools.getConfig(node) ;
if(config && (node.level < 3)) {
    var col = config.columns[node.level-1] ;
    if(col) {
        output = col.name + ' ' + output ;
    }
}
return output ;"
        }],
        "columnNames": ["NAME", "DISTRICT", "ZIPCODE", "dm_geometry_type", "dm_geometry_coords", "ADDRESS"],
        "columns": [{
            "name": "DISTRICT",
            "array index": 0,
            "columnIndex": 1
        }, {
            "name": "ZIPCODE",
            "array index": 1,
            "columnIndex": 2
        }, {
            "name": "ADDRESS",
            "array index": 2,
            "columnIndex": 5
        }, {
            "name": "NAME",
            "array index": 3,
            "columnIndex": 0
        }],
        "displayProps": [{
            "name": "root",
            "edit": false,
            "visible": false,
            "children": [{
                "name": "dm_geometry_coords",
                "array index": 0,
                "visible": false
            }, {
                "name": "dm_geometry_type",
                "array index": 1,
                "visible": false
            }, {
                "name": "items",
                "array index": 2,
                "label": "Items",
                "type": "text",
                "edit": false,
                "visible": true
            }, {
                "name": "itemsPie",
                "array index": 3,
                "label": "number of parks",
                "type": "graph",
                "edit": false,
                "visible": true,
                "graph": "pie",
                "doTransition": true,
                "predefinedGraphDropdown": "pie based on property",
                "graphProperty1": "items",
                "graphUnit1": "park(s)",
                "graphDepth": 1,
                "textInPie": false,
                "input": "var output, elt;
var levelMin = node.level ;
var doIt = function(node) {
    if (!output) {
        output = [] ;
    }
    elt = {} ;
    output.push(elt) ;
    elt.value = node.rawNode['items'] ;
    elt.name = node.rawNode.displayName ;
    elt.unit = 'park(s)' ;
};
var parentLevel = node.level ;
var depth = 1 ;
var dive = function(node) {
    if (node) {
        if (node.level == parentLevel + depth) {
            doIt(node);
        } else if ((node.level < parentLevel + depth) && (node.children)) {
            node.children.forEach(function(child) {
                dive(child);
            });
        }
    }
} ;
dive(node);
return output;",
                "borderIn1": "graphIn",
                "borderOut1": "graphOut"
            }]
        }, {
            "name": "level 1",
            "edit": false,
            "visible": false,
            "children": [{
                "name": "dm_geometry_coords",
                "array index": 0,
                "visible": false
            }, {
                "name": "dm_geometry_type",
                "array index": 1,
                "visible": false
            }, {
                "name": "items",
                "array index": 2,
                "label": "Items",
                "type": "text",
                "edit": false,
                "visible": true
            }, {
                "name": "itemsPie",
                "array index": 3,
                "label": "number of parks",
                "type": "graph",
                "edit": false,
                "visible": true,
                "graph": "pie",
                "doTransition": true,
                "predefinedGraphDropdown": "pie based on property",
                "graphProperty1": "items",
                "graphUnit1": "park(s)",
                "graphDepth": 1,
                "textInPie": false,
                "input": "var output, elt;
var levelMin = node.level ;
var doIt = function(node) {
    if (!output) {
        output = [] ;
    }
    elt = {} ;
    output.push(elt) ;
    elt.value = node.rawNode['items'] ;
    elt.name = node.rawNode.displayName ;
    elt.unit = 'park(s)' ;
};
var parentLevel = node.level ;
var depth = 1 ;
var dive = function(node) {
    if (node) {
        if (node.level == parentLevel + depth) {
            doIt(node);
        } else if ((node.level < parentLevel + depth) && (node.children)) {
            node.children.forEach(function(child) {
                dive(child);
            });
        }
    }
} ;
dive(node);
return output;",
                "borderIn1": "graphIn",
                "borderOut1": "graphOut"
            }]
        }, {
            "name": "level 2",
            "edit": false,
            "visible": false,
            "children": [{
                "name": "dm_geometry_coords",
                "array index": 0,
                "visible": false
            }, {
                "name": "dm_geometry_type",
                "array index": 1,
                "visible": false
            }, {
                "name": "items",
                "array index": 2,
                "label": "Items",
                "type": "text",
                "edit": false,
                "visible": true
            }, {
                "name": "itemsPie",
                "array index": 3,
                "label": "number of parks",
                "type": "graph",
                "edit": false,
                "visible": true,
                "graph": "pie",
                "doTransition": true,
                "predefinedGraphDropdown": "pie based on property",
                "graphProperty1": "items",
                "graphUnit1": "park(s)",
                "graphDepth": 1,
                "textInPie": false,
                "input": "var output, elt;
var levelMin = node.level ;
var doIt = function(node) {
    if (!output) {
        output = [] ;
    }
    elt = {} ;
    output.push(elt) ;
    elt.value = node.rawNode['items'] ;
    elt.name = node.rawNode.displayName ;
    elt.unit = 'park(s)' ;
};
var parentLevel = node.level ;
var depth = 1 ;
var dive = function(node) {
    if (node) {
        if (node.level == parentLevel + depth) {
            doIt(node);
        } else if ((node.level < parentLevel + depth) && (node.children)) {
            node.children.forEach(function(child) {
                dive(child);
            });
        }
    }
} ;
dive(node);
return output;",
                "borderIn1": "graphIn",
                "borderOut1": "graphOut"
            }]
        }, {
            "name": "level 3",
            "edit": false,
            "visible": false,
            "children": [{
                "name": "dm_geometry_coords",
                "array index": 0,
                "visible": false
            }, {
                "name": "dm_geometry_type",
                "array index": 1,
                "visible": false
            }, {
                "name": "items",
                "array index": 2,
                "label": "Items",
                "type": "text",
                "edit": false,
                "visible": true
            }, {
                "name": "itemsPie",
                "array index": 3,
                "label": "number of parks",
                "type": "graph",
                "edit": false,
                "visible": true,
                "graph": "pie",
                "doTransition": true,
                "predefinedGraphDropdown": "pie based on property",
                "graphProperty1": "items",
                "graphUnit1": "park(s)",
                "graphDepth": 1,
                "textInPie": false,
                "input": "var output, elt;
var levelMin = node.level ;
var doIt = function(node) {
    if (!output) {
        output = [] ;
    }
    elt = {} ;
    output.push(elt) ;
    elt.value = node.rawNode['items'] ;
    elt.name = node.rawNode.displayName ;
    elt.unit = 'park(s)' ;
};
var parentLevel = node.level ;
var depth = 1 ;
var dive = function(node) {
    if (node) {
        if (node.level == parentLevel + depth) {
            doIt(node);
        } else if ((node.level < parentLevel + depth) && (node.children)) {
            node.children.forEach(function(child) {
                dive(child);
            });
        }
    }
} ;
dive(node);
return output;",
                "borderIn1": "graphIn",
                "borderOut1": "graphOut"
            }]
        }, {
            "name": "leaf",
            "edit": false,
            /*
            "visible": true,
            */
            "children": [{
                "name": "dm_geoMapDisplayStreetView",
                "order": 0,
                "visible": true
            }, {
                "name": "NAME",
                "order": 1,
                "visible": true
            }, {
                "name": "DISTRICT",
                "order": 2,
                "visible": true
            }, {
                "name": "ZIPCODE",
                "order": 3,
                "visible": true
            }, {
                "name": "ADDRESS",
                "order": 4,
                "visible": true
            }, {
                "name": "items",
                "array index": 0,
                "label": "Items",
                "type": "text",
                "edit": false,
                "visible": false
            }, {
                "name": "linear",
                "edit": false,
                "visible": false
            }, {
                "name": "itemsPie",
                "array index": 1,
                "label": "number of parks",
                "type": "graph",
                "edit": false,
                "visible": true,
                "graph": "pie",
                "doTransition": true,
                "predefinedGraphDropdown": "pie based on property",
                "graphProperty1": "items",
                "graphUnit1": "park(s)",
                "graphDepth": 1,
                "textInPie": false,
                "input": "var output, elt;
var levelMin = node.level ;
var doIt = function(node) {
    if (!output) {
        output = [] ;
    }
    elt = {} ;
    output.push(elt) ;
    elt.value = node.rawNode['items'] ;
    elt.name = node.rawNode.displayName ;
    elt.unit = 'park(s)' ;
};
var parentLevel = node.level ;
var depth = 1 ;
var dive = function(node) {
    if (node) {
        if (node.level == parentLevel + depth) {
            doIt(node);
        } else if ((node.level < parentLevel + depth) && (node.children)) {
            node.children.forEach(function(child) {
                dive(child);
            });
        }
    }
} ;
dive(node);
return output;",
                "borderIn1": "graphIn",
                "borderOut1": "graphOut"
            }]
        }],
        "specifics": [{
            "name": "$dm_all",
            "array index": 0,
            "array index.dm_props": {
                "visible": false,
                "editable": false,
                "name": "array index"
            },
            "dm_geoMapDisplayStreetView.dm_props": {
                "order": 0,
                "type": "streetView",
                "edit": false,
                "visible": true,
                "dontExport": true,
                "name": "dm_geoMapDisplayStreetView",
                "dontDeleteWhenCleanUpConfig": true
            },
            "dm_geometry_type.dm_props": {
                "label": "geometry",
                "edit": false,
                "visible": false,
                "dontExport": true,
                "name": "dm_geometry_type",
                "dontDeleteWhenCleanUpConfig": true
            },
            "dm_geometry_coords.dm_props": {
                "label": "geometry coords",
                "edit": false,
                "visible": false,
                "dontExport": true,
                "name": "dm_geometry_coords",
                "dontDeleteWhenCleanUpConfig": true
            },
            "dm_geoMapCoordsMinMax.dm_props": {
                "edit": false,
                "visible": false,
                "dontExport": true,
                "name": "dm_geoMapCoordsMinMax",
                "dontDeleteWhenCleanUpConfig": true
            },
            "dm_geoMapAggregatedGeoJson.dm_props": {
                "edit": false,
                "visible": false,
                "dontExport": true,
                "name": "dm_geoMapAggregatedGeoJson",
                "dontDeleteWhenCleanUpConfig": true
            }
        }],
        "styles": [{
            "name": "root",
            "array index": 0,
            "level": 0,
            "arrow": true,
            "arc": false,
            "rNod": 10,
            "link": 150,
            "color": "#1f77b4",
            "attrPaneCol": "#aec7e8",
            "mapOpacity": 0.5,
            "backgroundImage": "../../images/empty.jpg",
            "backgroundImage.dm_props": {
                "order": 11,
                "name": "backgroundImage",
                "imageName": "../../images/empty.jpg",
                "type": "image"
            },
            "txtFontSize": 13
        }, {
            "name": "level 1",
            "array index": 1,
            "level": 1,
            "arrow": true,
            "arc": false,
            "rNod": 10,
            "link": 130,
            "color": "#1f77b4",
            "mapOpacity": 0.5,
            "attrPaneCol": "#aec7e8"
        }, {
            "name": "level 2",
            "array index": 2,
            "level": 2,
            "arrow": true,
            "arc": false,
            "rNod": 9,
            "link": 130,
            "color": "#ff7f0e",
            "mapOpacity": 0.5,
            "attrPaneCol": "#ffbb78"
        }, {
            "name": "level 3",
            "array index": 3,
            "level": 3,
            "arrow": true,
            "arc": false,
            "rNod": 9,
            "link": 130,
            "color": "#2ca02c",
            "mapOpacity": 0.5,
            "attrPaneCol": "#98df8a"
        }, {
            "name": "leaf",
            "array index": 4,
            "level": 19,
            "arrow": false,
            "arc": true,
            "rNod": 3,
            "link": 90,
            "color": "#c7c7c7",
            "attrPaneCol": "#c7c7c7",
            "mapOpacity": 0.6,
            "txtCol": "#7f7f7f"
        }]
    }
}